
begin
  require 'app-deploy'
rescue LoadError
  puts "app-deploy not found, automaticly downloading and installing..."

  gem_cmd = "#{Gem.ruby} -S gem"
  gem_opt = '--user-install --no-ri --no-rdoc'
  gem_int = "#{gem_cmd} install #{gem_opt}"

  sh "#{gem_int} app-deploy"

  Gem.refresh
  require 'app-deploy'
end

task :default do
  Rake.application.options.show_task_pattern = /./
  Rake.application.display_tasks_and_comments
end

# install gem from rubyforge
AppDeploy.dependency_gem :gem => 'bones'

# install gem from github
AppDeploy.dependency_gem :gem => 'pagfiy', :source => 'http://gems.github.com'

# clone and build and install gem from github with bones
AppDeploy.dependency_gem :github_user    => 'godfat',
                         :github_project => 'friendly_format',
                         :task_gem       => 'bones'

# same as above but with hoe, and select a git clone path.
AppDeploy.dependency_gem :github_user    => 'godfat',
                         :github_project => 'mogilefs-client',
                         :task_gem       => 'hoe',
                         :git_path       => 'tmp/mogilefs-client'

# same as above but with custom install script
AppDeploy.dependency_gem :github_user    => 'godfat',
                         :github_project => 'app-deploy',
                         :git_path       => 'tmp/app-deploy' do
  sh 'rake clobber'
  sh 'rake gem:package'
  sh 'gem install pkg/app-deploy-*.gem'
end

# no gem to install, just clone it
AppDeploy.dependency     :github_user    => 'godfat',
                         :github_project => 'in_place_editing',
                         :git_path       => 'tmp/vendor/plugins/in_place_editing'

%w[ rack rails daemons rmagick passenger
    dm-core dm-types dm-timestamps dm-aggregates
    mogilefs-client memcache-client rubycas-client ].each{ |name|
  AppDeploy.dependency_gem(:gem => name)
}

namespace :app do
  namespace :install do
    # before install hook
    task :before do
      # explicit install gem, ignore gem that was already installed
      AppDeploy.install_gem(:gem => 'hoe')
    end

    # after install hook
    task :after do
      # explicit uninstall gem, ignore gem that was not installed
      AppDeploy.uninstall_gem(:gem => 'zzz')

      # install passenger nginx module
      sh("#{Gem.user_dir}/bin/" +
         Gem.default_exec_format % 'passenger-install-nginx-module' +
         " --auto --auto-download --prefix=#{Dir.pwd}/nginx")
    end
  end

  namespace :server do
    # use thin as server
    task :restart => 'thin:restart'

    [:start, :stop, :restart, :reload].each{ |cmd|
      desc "#{cmd} nginx(passenger)"
      task cmd do
        task = Rake::Task["app:nginx:#{cmd}"]
        args = task.arg_names.map{ |name|
          case name
            when :config; '/home/app/config/nginx.conf'
            when :nginx;  '/home/app/nginx/sbin/nginx'
            else;         nil
          end
        }
        task.invoke(args)

        # or
        AppDeploy.invoke("app:nginx:#{cmd}",
          :config => '/home/app/config/nginx.conf',
          :nginx  => '/home/app/nginx/sbin/nginx')

        # or
        ENV['config'] = '/home/app/config/nginx.conf'
        ENV['nginx']  = '/home/app/nginx/sbin/nginx'
        Rake::Task["app:nginx:#{cmd}"].invoke
      end
    }
  end
end

begin # prevent lacking rails to stop rake app:install to install rails
  gem 'rails'

  require(File.join(File.dirname(__FILE__), 'config', 'boot'))

  require 'rake'
  require 'rake/testtask'
  require 'rake/rdoctask'

  require 'tasks/rails'
rescue LoadError
end
